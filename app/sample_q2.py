# You are given a list of dictionaries, where each dictionary represents a completed service job. Each job has the following keys: job_id (string), technician (string), job_type (string, e.g., "HVAC Repair", "Plumbing Install"), duration_hours (float), and revenue (float).

# Your task is to write a Python function calculate_technician_revenue that takes this list of job dictionaries and returns a dictionary where keys are technician names and values are the total revenue generated by that technician across all their jobs.

jobs_data = [
    {"job_id": "J001", "technician": "Alice", "job_type": "HVAC Repair", "duration_hours": 2.5, "revenue": 350.0},
    {"job_id": "J002", "technician": "Bob", "job_type": "Plumbing Install", "duration_hours": 4.0, "revenue": 800.0},
    {"job_id": "J003", "technician": "Alice", "job_type": "Electrical Check", "duration_hours": 1.0, "revenue": 150.0},
    {"job_id": "J004", "technician": "Charlie", "job_type": "HVAC Maintenance", "duration_hours": 1.5, "revenue": 200.0},
    {"job_id": "J005", "technician": "Bob", "job_type": "Plumbing Repair", "duration_hours": 0.75, "revenue": 120.0},
    {"job_id": "J006", "technician": "Alice", "job_type": "HVAC Install", "duration_hours": 6.0, "revenue": 1200.0},
]
{
    "Alice": 1700.0,  # 350.0 + 150.0 + 1200.0
    "Bob": 920.0,     # 800.0 + 120.0
    "Charlie": 200.0  # 200.0
}

def calculate_technician_revenue(jobs_list):
    technician_dict = dict()
    for job in jobs_list:
        technician = job["technician"]
        revenue = job["revenue"]
        duration = job["duration_hours"]
        total_revenue = revenue * duration
        if technician_dict.get(technician) == None:
            technician_dict[technician] = 0
        technician_dict[technician] += revenue
    return technician_dict
print(calculate_technician_revenue(jobs_data))
# You are given the same list of dictionaries, where each dictionary represents a completed service job with keys: job_id, technician, job_type, duration_hours, and revenue.

# Your task is to write a Python function calculate_technician_hourly_rate that takes this list of job dictionaries and returns a dictionary where keys are technician names and values are their calculated average revenue per hour across all their jobs.

# Revenue per hour for a technician is calculated as: (Total Revenue for Technician) / (Total Duration Hours for Technician).
import json
jobs_data1 = [
    {"job_id": "J001", "technician": "Alice", "job_type": "HVAC Repair", "duration_hours": 2.0, "revenue": 300.0},
    {"job_id": "J002", "technician": "Bob", "job_type": "Plumbing Install", "duration_hours": 5.0, "revenue": 1000.0},
    {"job_id": "J003", "technician": "Alice", "job_type": "Electrical Check", "duration_hours": 1.5, "revenue": 225.0},
    {"job_id": "J004", "technician": "Charlie", "job_type": "HVAC Maintenance", "duration_hours": 1.0, "revenue": 180.0},
    {"job_id": "J005", "technician": "Bob", "job_type": "Plumbing Repair", "duration_hours": 1.0, "revenue": 200.0},
    {"job_id": "J006", "technician": "Alice", "job_type": "HVAC Install", "duration_hours": 7.0, "revenue": 1400.0},
    {"job_id": "J007", "technician": "David", "job_type": "Consultation", "duration_hours": 0.0, "revenue": 50.0}, # Edge case: 0 duration
]
{
    "Alice": 183.33,
    "Bob": 200.00,
    "Charlie": 180.00,
    "David": 0.00
}

def calculate_technician_hourly_rate(jobs_list):
    technician_dict = dict()
    final_dict = dict()
    for job in jobs_list:
        technician = job["technician"]
        duration = job["duration_hours"]
        reveneue = job["revenue"]

        if technician_dict.get(technician) == None:
            technician_dict[technician] = {"revenue": 0, "duration": 0}
        technician_dict[technician]["revenue"] += reveneue
        technician_dict[technician]["duration"] += duration
    for name, rev_dict in technician_dict.items():
        final_dict[name] = round(rev_dict["revenue"] / rev_dict["duration"], 2) if rev_dict["duration"] != 0 else 0.00
    return final_dict
print(json.dumps(calculate_technician_hourly_rate(jobs_data1), indent=2))

import requests
# Problem:

# You are given two pieces of data:

# A list of dictionaries, jobs_list, where each dictionary represents a completed service job. Each job has keys: job_id, technician, revenue (float), and parts_used (a list of strings, where each string is a part ID).
# A dictionary, part_costs, where keys are part_id strings and values are their corresponding cost (float).
# Your task is to write a Python function calculate_technician_profit that takes jobs_list and part_costs as input and returns a dictionary where keys are technician names and values are the total profit generated by that technician.

# Profit for a job is calculated as: Job Revenue - Total Cost of Parts used in the job.
# Total Profit for a technician is the sum of the profits from all their jobs.
jobs_list2 = [
    {"job_id": "J001", "technician": "Alice", "revenue": 500.0, "parts_used": ["P101", "P105"]},
    {"job_id": "J002", "technician": "Bob", "revenue": 1200.0, "parts_used": ["P201", "P203", "P101"]},
    {"job_id": "J003", "technician": "Alice", "revenue": 300.0, "parts_used": ["P105"]},
    {"job_id": "J004", "technician": "Charlie", "revenue": 700.0, "parts_used": []}, # No parts used
    {"job_id": "J005", "technician": "Bob", "revenue": 450.0, "parts_used": ["P203", "P999"]}, # P999 not in part_costs
    {"job_id": "J006", "technician": "Alice", "revenue": 1500.0, "parts_used": ["P101", "P105", "P201"]},
    {"job_id": "J007", "technician": "David", "revenue": 100.0, "parts_used": None}, # Edge case: parts_used is None
]
part_costs = {
    "P101": 50.0,
    "P105": 20.0,
    "P201": 100.0,
    "P203": 30.0,
}
{
    "Alice": 2040.0,
    "Bob": 1440.0,
    "Charlie": 700.0,
    "David": 100.0
}
def calculate_technician_profit(jobs_list, part_costs):
    technician_dict = dict()
    for job in jobs_list:
        tech = job["technician"]
        revenue = job["revenue"]
        cost = 0
        for part in job["parts_used"] if job["parts_used"] else []:
            cost += part_costs[part] if part in part_costs else 0.00
        if technician_dict.get(tech) == None:
            technician_dict[tech] = 0.00
        technician_dict[tech] += round(revenue - cost, 2)
    return technician_dict
print(calculate_technician_profit(jobs_list2, part_costs))
response = requests.get("https://jsonplaceholder.typicode.com/users")
if response.status_code == 200:
    data = response.json()
    print("Data retrieved successfully:", json.dumps(data, indent=2))
else:
    print("Failed to retrieve data:", response.status_code)

